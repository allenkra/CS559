#ifdef VS 
 
precision highp float;

attribute vec3 position;
attribute vec3 normal;

uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform float time;
const float pi=3.14159;
varying vec3 fNormal;
varying vec3 fPosition;
varying vec3 fLightDirection;

void main()
{
    fNormal = normalize(normalMatrix * normal);

    vec3 lightPos = vec3(5.0 * sin(10.0* pi*time), 5.0 * cos(10.0 * pi*time), 5.0);
    fLightDirection = normalize(lightPos - position);

    vec4 pos = modelViewMatrix * vec4(position, 1.0);
    fPosition = pos.xyz;

    gl_Position = projectionMatrix * pos;
}

 
#else 
 
precision highp float;

uniform float time;
uniform vec2 resolution;

varying vec3 fPosition;
varying vec3 fNormal;
varying vec3 fLightDirection;
const float pi=3.14159;
void main()
{
    vec3 baseColor = vec3(0.6, 0.4, 0.6);
    vec3 color = baseColor * 0.8 * (1.5 + sin(10.0 * pi *time));

    float diff = max(dot(fNormal, fLightDirection), 0.0);
    vec3 diffuse = diff * color;

    gl_FragColor = vec4(diffuse, 1.0);
}

 
#endif