#ifdef VS 
 
precision highp float;

attribute vec3 position;
attribute vec3 normal;

uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform float time;
const float pi = 3.14159;

varying vec3 fNormal;
varying vec3 fPosition;
varying vec3 fLightDirection;
varying vec3 fViewDirection;
varying vec3 rawX;
varying vec3 fLightDirectionM;

void main()
{
    rawX = position;
    fNormal = normalize(normalMatrix * normal);

    vec3 lightPos = vec3(5.0 * sin(10.0 * pi * time), 5.0 * cos(10.0 * pi * time), 5.0);
    
    fLightDirection = normalize(lightPos - position);
    
    vec3 lightPosm = vec3(5.0, 5.0 * cos(50.0 * pi * time),5.0 * sin(50.0 * pi * time));
    fLightDirectionM = normalize(lightPosm - position);

    vec4 pos = modelViewMatrix * vec4(position, 1.0);
    fPosition = pos.xyz;

    // è§‚å¯Ÿæ–¹å‘
    vec4 viewPos = modelViewMatrix * vec4(.0, 0.0, 0.0, 1.0); // å‡è®¾ç›¸æœºåœ¨åŽŸç‚¹
    fViewDirection = normalize(viewPos.xyz - fPosition);

    gl_Position = projectionMatrix * pos;
}

 
#else 
 
precision highp float;

uniform float time;
uniform vec2 resolution;
uniform vec3 viewPos; // æ·»åŠ è§‚å¯Ÿè€…ä½ç½®

varying vec3 rawX;
varying vec3 fPosition;
varying vec3 fNormal;
varying vec3 fLightDirection;
varying vec3 fViewDirection;
varying vec3 fLightDirectionM;
const float pi = 3.14159;

void main()
{
    float shininess = 0.8;
    vec3 baseColor1 = vec3(0.6, 0.4, 0.6);
    vec3 baseColor2 = vec3(0.2, 0.7, 0.7);
    
    vec3 dir2 = vec3(sin(time * 10.0),0,cos(time * 10.0));
    float diffuse2 = pow(dot(fNormal,dir2),2.0);
    vec3 color = baseColor1 * 0.8 * (1.5 + sin(10.0 * pi * time));

    float diff = max(dot(fNormal, fLightDirection), 0.0);
    vec3 diffuse = diff * color;

    vec3 halfDir = normalize(fLightDirectionM + fViewDirection);
    float spec = pow(max(dot(fNormal, halfDir), 0.0), shininess);
    vec3 specular = vec3(1.0,0.5,0.5) * spec; 

    vec3 finalColor = 0.8*diffuse + specular*2.0; 
    gl_FragColor = vec4(finalColor, 1.0);

    if (sin(20.0 * rawX.x * rawX.y * pi) > 0.8) discard;
}

 
#endif